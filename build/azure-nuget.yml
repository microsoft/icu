# Nuget Build Pipeline

# no PR triggers
pr: none

# Note: Code signing is only enabled for the manually triggered build pipeline in MSCodeHub.
variables:
  codeSign: ${{ eq(variables['System.definitionId'], '1386') }}
  BuildConfiguration: 'Release'
  nugetPackageName: 'Microsoft.ICU.ICU4C.Runtime'

stages:
- stage: Build
  jobs:
  - job: BuildLinux
    pool:
      name: Azure Pipelines
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all

    strategy:
      matrix:
        centos:
          distro: 'centos'
          BuildPlatform: 'x64'
        arm64:
          distro: 'ubuntu-arm64'
          BuildPlatform: 'arm64'

    steps:
      - checkout: self
        lfs: true
        fetchDepth: 1

      - task: PowerShell@2
        displayName: 'Set ICU Version'
        inputs:
          targetType: filePath
          filePath: './build/scripts/Set-ICUVersion.ps1'
          arguments: '-icuVersionFile "$(BUILD.SOURCESDIRECTORY)\version.txt"'

      - task: Docker@2
        displayName: 'Setup Docker Container: $(distro)'
        inputs:
          command: build
          Dockerfile: 'build/dockerfiles/$(distro)/Dockerfile'
          arguments: -t ms-icu-container-$(BuildPlatform)

      - script: |
          pwd && mkdir -p /tmp/build-output && docker run --rm -v $(pwd):/src -v /tmp/build-output:/dist ms-icu-container-$(BuildPlatform) /src/build/scripts/build-icu-$(BuildPlatform).sh
        displayName: 'Configure ICU and Build'

      - script: |
          cd /tmp/build-output && ls -Rl
        displayName: 'DIAG: ls -Rl'

      # Note: We only copy the .so files with the full version (ex: libicuuc.so.67.1.0.4)
      - script: |
          mkdir /tmp/icu-binaries
          ls -al /tmp/build-output/icu/usr/local/lib/
          cp /tmp/build-output/icu/usr/local/lib/libicudata.so.$(ICUVersion) /tmp/icu-binaries
          cp /tmp/build-output/icu/usr/local/lib/libicui18n.so.$(ICUVersion) /tmp/icu-binaries
          cp /tmp/build-output/icu/usr/local/lib/libicuuc.so.$(ICUVersion) /tmp/icu-binaries
        displayName: 'Copy .so files'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish: binaries'
        inputs:
          PathtoPublish: '/tmp/icu-binaries'
          ArtifactName: 'linux-$(BuildPlatform)'

      - script: |
          mkdir /tmp/icu-symbols
          ls -al /tmp/build-output/icu/usr/local/lib/
          cp /tmp/build-output/icu/usr/local/lib/libicudata.so.$(ICUVersion).debug /tmp/icu-symbols
          cp /tmp/build-output/icu/usr/local/lib/libicui18n.so.$(ICUVersion).debug /tmp/icu-symbols
          cp /tmp/build-output/icu/usr/local/lib/libicuuc.so.$(ICUVersion).debug /tmp/icu-symbols
        displayName: 'Copy debug symbols'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish: symbols'
        inputs:
          PathtoPublish: '/tmp/icu-symbols'
          ArtifactName: 'Symbols-$(nugetPackageName).linux-$(BuildPlatform)'

  - job: BuildWindows
    timeoutInMinutes: 60
    pool:
      name: Azure Pipelines
      vmImage: 'windows-2019'
      demands:
      - msbuild
      - visualstudio
    workspace:
      clean: all

    # Note: The VS uses "Win32" for 32-bit arch, but we use x86 in the pipeline.
    # This matrix strategy lets us build the different architectures in parallel.
    strategy:
      matrix:
        Win32:
          BuildPlatform: 'x86'
          IcuBuildPlatform: 'Win32'
        Win64:
          BuildPlatform: 'x64'
          IcuBuildPlatform: 'x64'
        ARM64:
          BuildPlatform: 'ARM64'
          IcuBuildPlatform: 'ARM64'
    
    steps:
    - checkout: self
      lfs: true
      fetchDepth: 1

    - powershell: |
        $PublishBinariesName = ""
        if ($env:codeSign -ieq 'true') {
          $PublishBinariesName = "binaries-$env:BuildPlatform"
        } else {
          $PublishBinariesName = "win-$env:BuildPlatform"
        }
        Write-Host PublishBinariesName = $PublishBinariesName
        Write-Host "##vso[task.setvariable variable=PublishBinariesName]$PublishBinariesName"
      displayName: 'Set PublishBinariesName variable'

    - task: PowerShell@2
      displayName: 'Set ICU Version'
      inputs:
        targetType: filePath
        filePath: './build/scripts/Set-ICUVersion.ps1'
        arguments: '-icuVersionFile "$(BUILD.SOURCESDIRECTORY)\version.txt"'

    # The ARM/ARM64 builds for ICU require the x64 tools in order to cross-build.
    - task: VSBuild@1
      displayName: 'Build x64 first (Only if building ARM)'
      inputs:
        solution: icu/icu4c/source/allinone/allinone.sln
        msbuildArgs: '/p:SkipUWP=true'
        platform: x64
        configuration: Release
      condition: eq(variables['IcuBuildPlatform'],'ARM64')

    - task: VSBuild@1
      displayName: 'Build $(BuildPlatform)'
      inputs:
        solution: icu/icu4c/source/allinone/allinone.sln
        msbuildArgs: '/p:SkipUWP=true'
        platform: '$(IcuBuildPlatform)'
        configuration: Release

    # Binaries (DLLs)
    - task: CopyFiles@2
      displayName: 'Copy x64'
      inputs:
        Contents: |
          icu\icu4c\bin64\icuuc*.dll
          icu\icu4c\bin64\icuin*.dll
          icu\icu4c\bin64\icudt*.dll
        TargetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'x64')

    - task: CopyFiles@2
      displayName: 'Copy ARM64'
      inputs:
        Contents: |
          icu\icu4c\binARM64\icuuc*.dll
          icu\icu4c\binARM64\icuin*.dll
          icu\icu4c\binARM64\icudt*.dll
        TargetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'ARM64')

    - task: CopyFiles@2
      displayName: 'Copy x86'
      inputs:
        Contents: |
          icu\icu4c\bin\icuuc*.dll
          icu\icu4c\bin\icuin*.dll
          icu\icu4c\bin\icudt*.dll
        TargetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'x86')

    # This is a sanity check to ensure that we have the real data DLL, and not the stubdata DLL.
    - powershell: |
        Write-Host 'Checking the size of the ICU data DLL...'
        if ((Get-Item "$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\icudt*.dll").length -lt 5KB) {
            throw 'Error: The ICU data DLL file appears to be too small.'
        }
      displayName: 'Check ICU Data DLL'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish: binaries'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)'
        ArtifactName: '$(PublishBinariesName)'

    # Symbols (PDBs)
    - task: CopyFiles@2
      displayName: 'Copy symbols x64'
      inputs:
        Contents: |
          icu\icu4c\lib64\icuuc*.pdb
          icu\icu4c\lib64\icuin*.pdb
          icu\icu4c\lib64\icudt*.pdb
        TargetFolder: '$(Build.ArtifactStagingDirectory)\symbols-$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'x64')

    - task: CopyFiles@2
      displayName: 'Copy symbols ARM64'
      inputs:
        Contents: |
          icu\icu4c\libARM64\icuuc*.pdb
          icu\icu4c\libARM64\icuin*.pdb
          icu\icu4c\libARM64\icudt*.pdb
        TargetFolder: '$(Build.ArtifactStagingDirectory)\symbols-$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'ARM64')

    - task: CopyFiles@2
      displayName: 'Copy symbols x86'
      inputs:
        Contents: |
          icu\icu4c\lib\icuuc*.pdb
          icu\icu4c\lib\icuin*.pdb
          icu\icu4c\lib\icudt*.pdb
        TargetFolder: '$(Build.ArtifactStagingDirectory)\symbols-$(BuildPlatform)'
        flattenFolders: true
      condition: eq(variables['BuildPlatform'],'x86')

    - task: PublishBuildArtifacts@1
      displayName: 'Publish: symbols'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\symbols-$(BuildPlatform)'
        ArtifactName: 'symbols-win-$(BuildPlatform)'

- stage: CodeSignBinaries
  condition: and(succeeded(), eq(variables.codeSign, true))
  dependsOn: Build
  pool:
    name: Azure Pipelines
    vmImage: 'windows-2019'
  jobs:
  - job: CodeSignBits
    timeoutInMinutes: 60
    workspace:
      clean: all
    variables:
      signingPattern: |
        icudt*.dll
        icuuc*.dll
        icuin*.dll

    # This matrix strategy lets us code-sign the architectures in parallel.
    strategy:
      matrix:
        Win32:
          BuildPlatform: 'x86'
        Win64:
          BuildPlatform: 'x64'
        ARM64:
          BuildPlatform: 'ARM64'
    
    steps:
    - checkout: self
      lfs: true
      fetchDepth: 1

    - task: PowerShell@2
      displayName: 'Set Version'
      inputs:
        targetType: filePath
        filePath: './build/scripts/Set-ICUVersion.ps1'
        arguments: '-icuVersionFile "$(BUILD.SOURCESDIRECTORY)\version.txt"'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download: Binaries'
      inputs:
        artifactName: 'binaries-$(BuildPlatform)'
        downloadPath: '$(Build.ArtifactStagingDirectory)\bits'

    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.BINARIESDIRECTORY)"
        Tree /F /A $(BUILD.BINARIESDIRECTORY)
        Write-Host ""
        Write-Host "$(BUILD.ArtifactStagingDirectory)"
        Tree /F /A $(BUILD.ArtifactStagingDirectory)
      displayName: 'DIAG: dir'

    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Governance Detection'
      inputs:
        alertWarningLevel: Medium
        scanType: 'Register'
        failOnAlert: true

    - task: EsrpCodeSigning@1
      displayName: 'ESRP CodeSigning - CodeSign DLLs'
      inputs:
        ConnectedServiceName: 'ESRP Code Signing for MS-ICU'
        FolderPath: '$(BUILD.ArtifactStagingDirectory)\bits\binaries-$(BuildPlatform)'
        Pattern: $(signingPattern)
        UseMinimatch: true
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
            {
              "keyCode": "CP-230012",
              "operationSetCode": "SigntoolSign",
              "parameters": [
                {
                  "parameterName": "OpusName",
                  "parameterValue": "Microsoft"
                },
                {
                  "parameterName": "OpusInfo",
                  "parameterValue": "http://www.microsoft.com"
                },
                {
                  "parameterName": "PageHash",
                  "parameterValue": "/NPH"
                },
                {
                  "parameterName": "FileDigest",
                  "parameterValue": "/fd sha256"
                },
                {
                  "parameterName": "TimeStamp",
                  "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
              ],
              "toolName": "signtool.exe",
            }
          ]
        SessionTimeout: '30'
        MaxConcurrency: '20'
        MaxRetryAttempts: '5'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish: binaries signed'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\bits\binaries-$(BuildPlatform)'
        ArtifactName: 'win-$(BuildPlatform)'

- stage: CreateNuget
  dependsOn:
  - Build
  - CodeSignBinaries
  # This stage needs to depend on CodeSignBinaries for the Release-Nuget pipeline, but it will be skipped in the CI-Nuget pipeline.
  condition: and(in(dependencies.Build.result, 'Succeeded'), in(dependencies.CodeSignBinaries.result, 'Succeeded', 'Skipped'))
  pool:
    name: Azure Pipelines
    vmImage: 'windows-2019'
  variables:
    BuildPlatform: AnyCPU

  jobs:
  - job: CreateNugetJob
    timeoutInMinutes: 30
    workspace:
      clean: all
    steps:
    - checkout: self
      lfs: true
      fetchDepth: 1

    - task: PowerShell@2
      displayName: 'Set Version'
      inputs:
        targetType: filePath
        filePath: './build/scripts/Set-ICUVersion.ps1'
        arguments: '-icuVersionFile "$(BUILD.SOURCESDIRECTORY)\version.txt"'

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.BINARIESDIRECTORY)"
        Tree /F /A $(BUILD.BINARIESDIRECTORY)
      displayName: 'DIAG: dir'

    # Binaries (.dll or .so files)
    - task: DownloadBuildArtifacts@0
      displayName: 'Download win-x86'
      inputs:
        artifactName: 'win-x86'
        downloadPath: '$(Build.BINARIESDIRECTORY)\bits'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download win-x64'
      inputs:
        artifactName: 'win-x64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\bits'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download win-ARM64'
      inputs:
        artifactName: 'win-ARM64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\bits'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download linux-x64'
      inputs:
        artifactName: 'linux-x64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\bits'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download linux-arm64'
      inputs:
        artifactName: 'linux-arm64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\bits'

    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.BINARIESDIRECTORY)"
        Tree /F /A $(BUILD.BINARIESDIRECTORY)
        Write-Host ""
        Write-Host "$(BUILD.SOURCESDIRECTORY)"
        Tree /F /A $(BUILD.SOURCESDIRECTORY)
      displayName: 'DIAG: dir'

    - task: PowerShell@2
      displayName: 'Create MS-ICU Nuget'
      inputs:
        targetType: filePath
        filePath: './build/scripts/Create-Nuget-Runtime.ps1'
        arguments: '-sourceRoot $(BUILD.SOURCESDIRECTORY) -icuBinaries "$(BUILD.BINARIESDIRECTORY)\bits" -output $(BUILD.ArtifactStagingDirectory)\output -codesign $(codeSign)'

    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.ArtifactStagingDirectory)"
        Tree /F /A $(BUILD.ArtifactStagingDirectory)
      displayName: 'DIAG: dir'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Nuget Packages'
      inputs:
        PathtoPublish: '$(BUILD.ArtifactStagingDirectory)\output\package'
        ArtifactName: 'Nuget_Packages'

- stage: CodeSignNuget
  dependsOn:
  - Build
  - CodeSignBinaries
  - CreateNuget
  condition: and(eq(variables.codeSign, true), and(in(dependencies.CodeSignBinaries.result, 'Succeeded'), in(dependencies.CreateNuget.result, 'Succeeded')))
  pool:
    name: Azure Pipelines
    vmImage: 'windows-2019'
  variables:
    BuildPlatform: AnyCPU

  jobs:
  - job: CodeSignNugetJob
    timeoutInMinutes: 60
    workspace:
      clean: all
    steps:
    - checkout: self
      lfs: true
      fetchDepth: 1

    - task: PowerShell@2
      displayName: 'Set Version'
      inputs:
        targetType: filePath
        filePath: './build/scripts/Set-ICUVersion.ps1'
        arguments: '-icuVersionFile "$(BUILD.SOURCESDIRECTORY)\version.txt"'

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Nuget'
      inputs:
        artifactName: 'Nuget_Packages'
        downloadPath: '$(BUILD.ArtifactStagingDirectory)\nuget'

    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.ArtifactStagingDirectory)"
        Tree /F /A $(BUILD.ArtifactStagingDirectory)
      displayName: 'DIAG: dir'
    
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Governance Detection'
      inputs:
        alertWarningLevel: Medium
        scanType: 'Register'
        failOnAlert: true

    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'ESRP Code Signing for MS-ICU'
        FolderPath: '$(BUILD.ArtifactStagingDirectory)\nuget\Nuget_Packages'
        Pattern: |
          *.nupkg
        UseMinimatch: true
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
            {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetSign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
            },
            {
                "KeyCode" : "CP-401405",
                "OperationCode" : "NuGetVerify",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
            }
          ]
        SessionTimeout: '30'
        MaxConcurrency: '20'
        MaxRetryAttempts: '5'
    
    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.ArtifactStagingDirectory)"
        Tree /F /A $(BUILD.ArtifactStagingDirectory)
      displayName: 'DIAG: dir'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Nuget Packages'
      inputs:
        PathtoPublish: '$(BUILD.ArtifactStagingDirectory)\nuget\Nuget_Packages'
        ArtifactName: 'Nuget_Packages_Signed'

    # Symbols (PDBs)
    - task: DownloadBuildArtifacts@0
      displayName: 'Download symbols-win-x86'
      inputs:
        artifactName: 'symbols-win-x86'
        downloadPath: '$(Build.BINARIESDIRECTORY)\symbols'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download symbols-win-x64'
      inputs:
        artifactName: 'symbols-win-x64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\symbols'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download symbols-win-ARM64'
      inputs:
        artifactName: 'symbols-win-ARM64'
        downloadPath: '$(Build.BINARIESDIRECTORY)\symbols'
    
    - powershell: |
        Write-Host ""
        Write-Host "$(BUILD.BINARIESDIRECTORY)"
        Tree /F /A $(BUILD.BINARIESDIRECTORY)
      displayName: 'DIAG: dir'

    # Publish the Windows Symbols to the public MSDL symbol server.
    # Accessible via https://msdl.microsoft.com/download/symbols
    - task: PublishSymbols@2
      displayName: 'Publish symbols to public server (no source indexing)'
      inputs:
        symbolsFolder: '$(Build.BINARIESDIRECTORY)\symbols'
        searchPattern: '**/*.pdb'
        SymbolsMaximumWaitTime: 30
        SymbolServerType: 'TeamServices'
        SymbolsProduct: 'MS-ICU Nuget Windows binaries'
        SymbolsVersion: '$(ICUVersion)'
      # The ADO task does not support indexing of GitHub sources.
        indexSources: false
        detailedLog: true
      # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
      # To work around this issue, we just force LIB to be any dir that we know exists.
      env:
        LIB: $(Build.SourcesDirectory)
        ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
        ArtifactServices_Symbol_PAT: $(MSICU_microsoftpublicsymbols_PAT)
