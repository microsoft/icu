From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jeff Genovy <29107334+jefgen@users.noreply.github.com>
Date: Tue, 10 Aug 2021 18:46:13 -0700
Subject: Fix LocaleBuilder errors when ICU default locale has BCP47 Unicode
 extension tags.

Upstream ticket: ICU-21707

diff --git a/icu/icu4c/source/common/localebuilder.cpp b/icu/icu4c/source/common/localebuilder.cpp
index 1dd8131e5895a5800d5c4039493b25a5a07a0eb3..509b1c4960bac621376e0590424e88661bbab263 100644
--- a/icu/icu4c/source/common/localebuilder.cpp
+++ b/icu/icu4c/source/common/localebuilder.cpp
@@ -212,6 +212,22 @@ _setUnicodeExtensions(Locale& locale, const CharString& value, UErrorCode& error
         locale, false, errorCode);
 }
 
+static Locale*
+_getNewDefaultLocale(UErrorCode& errorCode)
+{
+    if (U_FAILURE(errorCode)) { return nullptr; }
+    // First allocate a new Locale. We'll move assign into this locale later.
+    LocalPointer<Locale> locale(new Locale(), errorCode);
+    if (U_FAILURE(errorCode)) { return nullptr; }
+    // Remove any pre-existing extensions that might exist on the default locale.
+    char name[ULOC_FULLNAME_CAPACITY];
+    uloc_getBaseName(uloc_getDefault(), name, ULOC_FULLNAME_CAPACITY, &errorCode);
+    if (U_FAILURE(errorCode)) { return nullptr; }
+    // Move assign to the existing locale object.
+    *locale = Locale::createFromName(name);
+    return locale.orphan();
+}
+
 LocaleBuilder& LocaleBuilder::setExtension(char key, StringPiece value)
 {
     if (U_FAILURE(status_)) { return *this; }
@@ -228,9 +244,8 @@ LocaleBuilder& LocaleBuilder::setExtension(char key, StringPiece value)
         return *this;
     }
     if (extensions_ == nullptr) {
-        extensions_ = new Locale();
-        if (extensions_ == nullptr) {
-            status_ = U_MEMORY_ALLOCATION_ERROR;
+        extensions_ = _getNewDefaultLocale(status_);
+        if (U_FAILURE(status_)) {
             return *this;
         }
     }
@@ -259,11 +274,10 @@ LocaleBuilder& LocaleBuilder::setUnicodeLocaleKeyword(
       return *this;
     }
     if (extensions_ == nullptr) {
-        extensions_ = new Locale();
-    }
-    if (extensions_ == nullptr) {
-        status_ = U_MEMORY_ALLOCATION_ERROR;
-        return *this;
+        extensions_ = _getNewDefaultLocale(status_);
+        if (U_FAILURE(status_)) {
+            return *this;
+        }
     }
     extensions_->setUnicodeKeywordValue(key, type, status_);
     return *this;
@@ -280,9 +294,8 @@ LocaleBuilder& LocaleBuilder::addUnicodeLocaleAttribute(
         return *this;
     }
     if (extensions_ == nullptr) {
-        extensions_ = new Locale();
-        if (extensions_ == nullptr) {
-            status_ = U_MEMORY_ALLOCATION_ERROR;
+        extensions_ = _getNewDefaultLocale(status_);
+        if (U_FAILURE(status_)) {
             return *this;
         }
         extensions_->setKeywordValue(kAttributeKey, value_str.data(), status_);
@@ -415,9 +428,8 @@ void LocaleBuilder::copyExtensionsFrom(const Locale& src, UErrorCode& errorCode)
         return;
     }
     if (extensions_ == nullptr) {
-        extensions_ = new Locale();
-        if (extensions_ == nullptr) {
-            status_ = U_MEMORY_ALLOCATION_ERROR;
+        extensions_ = _getNewDefaultLocale(status_);
+        if (U_FAILURE(status_)) {
             return;
         }
     }
diff --git a/icu/icu4c/source/test/intltest/localebuildertest.cpp b/icu/icu4c/source/test/intltest/localebuildertest.cpp
index 13f6ecf412029ec1c8624884ba42a516a5bec719..2daa5edec54828b11327af5681821949defdf068 100644
--- a/icu/icu4c/source/test/intltest/localebuildertest.cpp
+++ b/icu/icu4c/source/test/intltest/localebuildertest.cpp
@@ -25,6 +25,7 @@ void LocaleBuilderTest::runIndexedTest( int32_t index, UBool exec, const char* &
     TESTCASE_AUTO(TestAddUnicodeLocaleAttributeIllFormed);
     TESTCASE_AUTO(TestLocaleBuilder);
     TESTCASE_AUTO(TestLocaleBuilderBasic);
+    TESTCASE_AUTO(TestLocaleBuilderBasicWithExtensionsOnDefaultLocale);
     TESTCASE_AUTO(TestPosixCases);
     TESTCASE_AUTO(TestSetExtensionOthers);
     TESTCASE_AUTO(TestSetExtensionPU);
@@ -363,6 +364,25 @@ void LocaleBuilderTest::TestLocaleBuilderBasic() {
            "setRegion('') got Error: %s\n");
 }
 
+void LocaleBuilderTest::TestLocaleBuilderBasicWithExtensionsOnDefaultLocale() {
+    // Change the default locale to one with extension tags.
+    UErrorCode status = U_ZERO_ERROR;
+    Locale originalDefault;
+    Locale::setDefault(Locale::createFromName("en-US-u-hc-h24"), status);
+    if (U_FAILURE(status)) {
+        errln("ERROR: Could not change the default locale");
+        return;
+    }
+
+    // Invoke the basic test now that the default locale has been changed.
+    TestLocaleBuilderBasic();
+
+    Locale::setDefault(originalDefault, status);
+    if (U_FAILURE(status)) {
+        errln("ERROR: Could not restore the default locale");
+    }
+}
+
 void LocaleBuilderTest::TestSetLanguageWellFormed() {
     // http://www.unicode.org/reports/tr35/tr35.html#unicode_language_subtag
     // unicode_language_subtag = alpha{2,3} | alpha{5,8};
diff --git a/icu/icu4c/source/test/intltest/localebuildertest.h b/icu/icu4c/source/test/intltest/localebuildertest.h
index 41f3730ff240f019effef01fd7f533ca2c28cb49..bb561756286dfb6e697b4099711d466862e866b5 100644
--- a/icu/icu4c/source/test/intltest/localebuildertest.h
+++ b/icu/icu4c/source/test/intltest/localebuildertest.h
@@ -20,6 +20,7 @@ class LocaleBuilderTest: public IntlTest {
     void TestAddUnicodeLocaleAttributeIllFormed(void);
     void TestLocaleBuilder(void);
     void TestLocaleBuilderBasic(void);
+    void TestLocaleBuilderBasicWithExtensionsOnDefaultLocale();
     void TestPosixCases(void);
     void TestSetExtensionOthers(void);
     void TestSetExtensionPU(void);
