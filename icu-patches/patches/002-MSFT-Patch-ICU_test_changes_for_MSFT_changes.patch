From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Ju <41210545+daniel-ju@users.noreply.github.com>
Date: Tue, 25 Jun 2019 16:57:29 -0700
Subject: [PATCH] Modify ICU tests to pass with our modified CLDR data.

These changes modify the ICU test to pass with our modified CLDR
data.
The modifications are generally for the following reasons:
 - Some of data is different due to internal requirements.
 - Some are due to the extra locales that we pick up from CLDR Seed.
   These Seed locales have data quality issues, which causes the
   ICU tests to fail as they don't meet the ICU expectations.
 - Changes to the fr-FR locale to use NBSP instead of NNBSP (U+00a0
   instead of U+202F) for NLS compatibility.
 - Removal of the yue-* locales.

---
 icu/icu/icu4c/source/test/cintltst/cldrtest.c | 29 ++++++++-
 icu/icu/icu4c/source/test/cintltst/cloctst.c  |  6 +-
 icu/icu/icu4c/source/test/cintltst/cnmdptst.c |  6 +-
 .../icu4c/source/test/intltest/apicoll.cpp    | 24 +++----
 .../icu4c/source/test/intltest/dtptngts.cpp   | 19 +++++-
 .../icu4c/source/test/intltest/locnmtst.cpp   |  8 ++-
 .../source/test/intltest/numbertest_api.cpp   | 16 +++--
 .../intltest/numbertest_decimalquantity.cpp   | 10 +--
 .../source/test/intltest/numbertest_range.cpp | 12 ++--
 .../source/test/intltest/numfmtspectest.cpp   | 65 +++++++++++--------
 .../icu4c/source/test/intltest/numfmtst.cpp   | 16 +++--
 .../icu4c/source/test/intltest/numrgts.cpp    | 28 +++++---
 .../icu4c/source/test/intltest/tsmthred.cpp   |  6 +-
 .../numberformattestspecification.txt         | 32 ++++-----
 14 files changed, 184 insertions(+), 93 deletions(-)

diff --git a/icu/icu/icu4c/source/test/cintltst/cldrtest.c b/icu/icu/icu4c/source/test/cintltst/cldrtest.c
index 87ae093c..9d5f0e1f 100644
--- a/icu/icu/icu4c/source/test/cintltst/cldrtest.c
+++ b/icu/icu/icu4c/source/test/cintltst/cldrtest.c
@@ -958,6 +958,26 @@ static void VerifyTranslation(void) {
         //else if (uprv_strncmp(currLoc,"bem",3) == 0 || uprv_strncmp(currLoc,"mgo",3) == 0 || uprv_strncmp(currLoc,"nl",2) == 0) {
         //    log_verbose("skipping test for %s, some month and country names known to use aux exemplars\n", currLoc);
         //}
+
+        /* MSFT Change: Begin */
+        else if (
+            uprv_strncmp(currLoc, "ba", 2) == 0 || uprv_strncmp(currLoc, "ba_RU", 5) == 0     ||
+            uprv_strncmp(currLoc, "byn", 3) == 0 || uprv_strncmp(currLoc, "byn_ER", 6) == 0   ||
+            uprv_strncmp(currLoc, "cu", 2) == 0 || uprv_strncmp(currLoc, "cu_RU", 5) == 0     ||
+            uprv_strncmp(currLoc, "dv", 2) == 0 || uprv_strncmp(currLoc, "dv_MV", 5) == 0     ||
+            uprv_strncmp(currLoc, "iu", 2) == 0 || uprv_strncmp(currLoc, "iu_CA", 5) == 0     ||
+            uprv_strncmp(currLoc, "mn_Mong", 7) == 0 || uprv_strncmp(currLoc, "mn_Mong_CN", 10) == 0   ||
+            uprv_strncmp(currLoc, "nqo", 3) == 0 || uprv_strncmp(currLoc, "nqo_GN", 6) == 0   ||
+            uprv_strncmp(currLoc, "oc", 2) == 0 || uprv_strncmp(currLoc, "oc_FR", 5) == 0     ||
+            uprv_strncmp(currLoc, "sa", 2) == 0 || uprv_strncmp(currLoc, "sa_IN", 5) == 0     ||
+            uprv_strncmp(currLoc, "syr", 3) == 0 || uprv_strncmp(currLoc, "syr_SY", 6) == 0   ||
+            uprv_strncmp(currLoc, "tig", 3) == 0 || uprv_strncmp(currLoc, "tig_ER", 6) == 0   ||
+            uprv_strncmp(currLoc, "wal", 3) == 0 || uprv_strncmp(currLoc, "wal_ET", 6) == 0
+        ) {
+            log_knownIssue("0", "MSFT Change: skipping test for %s which has issues due to CLDR Seed data.", currLoc);
+        }
+        /* MSFT Change: End */
+
         else {
             UChar langBuffer[128];
             int32_t langSize;
@@ -1232,7 +1252,14 @@ static void TestExemplarSet(void){
             }
 
             if (existsInScript == FALSE){
-                log_err("ExemplarSet containment failed for locale : %s\n", locale);
+                /* MSFT Change */
+                if (uprv_strncmp(locale, "oc", 2) == 0 || uprv_strncmp(locale, "oc_FR", 5) == 0) {
+                    log_knownIssue("0", "MSFT Change: oc and oc_FR have ExemplarSet issues.");
+                    continue;
+                } else {
+                    log_err("ExemplarSet containment failed for locale : %s\n", locale);
+                }
+                /* MSFT Change: End */
             }
         }
         assertTrue("case-folded is a superset",
diff --git a/icu/icu/icu4c/source/test/cintltst/cloctst.c b/icu/icu/icu4c/source/test/cintltst/cloctst.c
index 22a05055..2a228274 100644
--- a/icu/icu/icu4c/source/test/cintltst/cloctst.c
+++ b/icu/icu/icu4c/source/test/cintltst/cloctst.c
@@ -1134,8 +1134,10 @@ typedef struct {
 
 static const DisplayNameBracketsItem displayNameBracketsItems[] = {
     { "en", "CC", "en_CC",      "Cocos (Keeling) Islands",  "English (Cocos [Keeling] Islands)"  },
-    { "en", "MM", "my_MM",      "Myanmar (Burma)",          "Burmese (Myanmar [Burma])"          },
-    { "en", "MM", "my_Mymr_MM", "Myanmar (Burma)",          "Burmese (Myanmar, Myanmar [Burma])" },
+    /* MSFT Change: Begin */
+    { "en", "MM", "my_MM",      "Myanmar",          "Burmese (Myanmar)"          },
+    { "en", "MM", "my_Mymr_MM", "Myanmar",          "Burmese (Myanmar, Myanmar)" },
+    /* MSFT Change: End */
     { "zh", "CC", "en_CC",      "\\u79D1\\u79D1\\u65AF\\uFF08\\u57FA\\u6797\\uFF09\\u7FA4\\u5C9B", "\\u82F1\\u8BED\\uFF08\\u79D1\\u79D1\\u65AF\\uFF3B\\u57FA\\u6797\\uFF3D\\u7FA4\\u5C9B\\uFF09" },
     { "zh", "CG", "fr_CG",      "\\u521A\\u679C\\uFF08\\u5E03\\uFF09",                             "\\u6CD5\\u8BED\\uFF08\\u521A\\u679C\\uFF3B\\u5E03\\uFF3D\\uFF09" },
     { NULL, NULL, NULL,         NULL,                       NULL                                 }
diff --git a/icu/icu/icu4c/source/test/cintltst/cnmdptst.c b/icu/icu/icu4c/source/test/cintltst/cnmdptst.c
index a40db7c4..195df79b 100644
--- a/icu/icu/icu4c/source/test/cintltst/cnmdptst.c
+++ b/icu/icu/icu4c/source/test/cintltst/cnmdptst.c
@@ -478,10 +478,12 @@ static void TestCurrencyObject(void)
         "JPY",
     };
 
+    /* MSFT Change: Begin */
     const char* result[]={
-        "1\\u202F234,56\\u00A0\\u20AC",
-        "1\\u202F235\\u00A0JPY",
+        "1\\u00a0234,56\\u00A0\\u20AC",
+        "1\\u00a0235\\u00A0JPY",
     };
+    /* MSFT Change: End */
 
     log_verbose("\nTesting the number format with different currency codes\n");
     for(i=0; i < 2; i++)
diff --git a/icu/icu/icu4c/source/test/intltest/apicoll.cpp b/icu/icu/icu4c/source/test/intltest/apicoll.cpp
index 88eefa92..249d9874 100644
--- a/icu/icu/icu4c/source/test/intltest/apicoll.cpp
+++ b/icu/icu/icu4c/source/test/intltest/apicoll.cpp
@@ -1664,18 +1664,20 @@ void CollationAPITest::TestGetLocale() {
     { "zh_TW", "zh_Hant_TW", "zh@collation=stroke" },
     { "zh_TW@collation=pinyin", "zh_Hant_TW@collation=pinyin", "zh" },
     { "zh_CN@collation=stroke", "zh_Hans_CN@collation=stroke", "zh@collation=stroke" },
+    /* MSFT Change: Begin */
     // yue/yue_Hant aliased to zh_Hant, yue_Hans aliased to zh_Hans.
-    { "yue", "zh_Hant", "zh@collation=stroke" },
-    { "yue_HK", "zh_Hant", "zh@collation=stroke" },
-    { "yue_Hant", "zh_Hant", "zh@collation=stroke" },
-    { "yue_Hant_HK", "zh_Hant", "zh@collation=stroke" },
-    { "yue@collation=pinyin", "zh_Hant@collation=pinyin", "zh" },
-    { "yue_HK@collation=pinyin", "zh_Hant@collation=pinyin", "zh" },
-    { "yue_CN", "zh_Hans", "zh" },
-    { "yue_Hans", "zh_Hans", "zh" },
-    { "yue_Hans_CN", "zh_Hans", "zh" },
-    { "yue_Hans@collation=stroke", "zh_Hans@collation=stroke", "zh@collation=stroke" },
-    { "yue_CN@collation=stroke", "zh_Hans@collation=stroke", "zh@collation=stroke" }
+    // { "yue", "zh_Hant", "zh@collation=stroke" },
+    // { "yue_HK", "zh_Hant", "zh@collation=stroke" },
+    // { "yue_Hant", "zh_Hant", "zh@collation=stroke" },
+    // { "yue_Hant_HK", "zh_Hant", "zh@collation=stroke" },
+    // { "yue@collation=pinyin", "zh_Hant@collation=pinyin", "zh" },
+    // { "yue_HK@collation=pinyin", "zh_Hant@collation=pinyin", "zh" },
+    // { "yue_CN", "zh_Hans", "zh" },
+    // { "yue_Hans", "zh_Hans", "zh" },
+    // { "yue_Hans_CN", "zh_Hans", "zh" },
+    // { "yue_Hans@collation=stroke", "zh_Hans@collation=stroke", "zh@collation=stroke" },
+    // { "yue_CN@collation=stroke", "zh_Hans@collation=stroke", "zh@collation=stroke" }
+    /* MSFT Change: End */
   };
 
   u_unescape(rules, rlz, 256);
diff --git a/icu/icu/icu4c/source/test/intltest/dtptngts.cpp b/icu/icu/icu4c/source/test/intltest/dtptngts.cpp
index 3a0f9edb..65e33cc3 100644
--- a/icu/icu/icu4c/source/test/intltest/dtptngts.cpp
+++ b/icu/icu/icu4c/source/test/intltest/dtptngts.cpp
@@ -1396,7 +1396,24 @@ void IntlTestDateTimePatternGeneratorAPI::testJjMapping() {
                      shortPattern.extract(0, shortPattern.length(), spBuf, 32);
                      jPattern.extract(0, jPattern.length(), jpBuf, 32);
                      const char* dfmtCalType = (dfmt->getCalendar())->getType();
-                     errln("ERROR: locale %s, expected j resolved char %s to occur in short time pattern '%s' for %s (best pattern: '%s')", localeID, jcBuf, spBuf, dfmtCalType, jpBuf);
+                     /* MSFT Change: Begin */
+                     if (
+                        uprv_strncmp(localeID, "byn", 3) == 0 || uprv_strncmp(localeID, "byn_ER", 6) == 0   ||
+                        uprv_strncmp(localeID, "iu_Latn", 7) == 0 || uprv_strncmp(localeID, "iu_Latn_CA", 10) == 0   ||
+                        uprv_strncmp(localeID, "mn_Mong", 7) == 0 || uprv_strncmp(localeID, "mn_Mong_CN", 10) == 0   ||
+                        uprv_strncmp(localeID, "moh", 3) == 0 || uprv_strncmp(localeID, "moh_CA", 6) == 0   ||
+                        uprv_strncmp(localeID, "ss_SZ", 5) == 0 || uprv_strncmp(localeID, "ssy", 3) == 0   ||
+                        uprv_strncmp(localeID, "ssy_ER", 6) == 0 || uprv_strncmp(localeID, "st_LS", 5) == 0   ||
+                        uprv_strncmp(localeID, "syr", 3) == 0 || uprv_strncmp(localeID, "syr_SY", 6) == 0   ||
+                        uprv_strncmp(localeID, "tig", 3) == 0 || uprv_strncmp(localeID, "tig_ER", 6) == 0   ||
+                        uprv_strncmp(localeID, "wal", 3) == 0 || uprv_strncmp(localeID, "wal_ET", 6) == 0
+                     ) {
+                        logKnownIssue("0", "MSFT Change: skipping test for %s which has issues due to CLDR Seed data.", localeID);
+                     }
+                     else {
+                        errln("ERROR: locale %s, expected j resolved char %s to occur in short time pattern %s for %s", localeID, jcBuf, spBuf, dfmtCalType);
+                     }
+                     /* MSFT Change: End */
                  }
                  break;
              }
diff --git a/icu/icu/icu4c/source/test/intltest/locnmtst.cpp b/icu/icu/icu4c/source/test/intltest/locnmtst.cpp
index 26f730d4..f9594600 100644
--- a/icu/icu/icu4c/source/test/intltest/locnmtst.cpp
+++ b/icu/icu/icu4c/source/test/intltest/locnmtst.cpp
@@ -68,10 +68,14 @@ void LocaleDisplayNamesTest::runIndexedTest(int32_t index, UBool exec, const cha
     switch (index) {
 #if !UCONFIG_NO_FORMATTING
         TESTCASE(0, TestCreate);
-        TESTCASE(1, TestCreateDialect);
+        /* MSFT Change: Begin */
+        // TESTCASE(1, TestCreateDialect);
+        /* MSFT Change: End */
         TESTCASE(2, TestWithKeywordsAndEverything);
         TESTCASE(3, TestUldnOpen);
-        TESTCASE(4, TestUldnOpenDialect);
+        /* MSFT Change: Begin */
+        // TESTCASE(4, TestUldnOpenDialect);
+        /* MSFT Change: End */
         TESTCASE(5, TestUldnWithKeywordsAndEverything);
         TESTCASE(6, TestUldnComponents);
         TESTCASE(7, TestRootEtc);
diff --git a/icu/icu/icu4c/source/test/intltest/numbertest_api.cpp b/icu/icu/icu4c/source/test/intltest/numbertest_api.cpp
index c586603b..f85a9c49 100644
--- a/icu/icu/icu4c/source/test/intltest/numbertest_api.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numbertest_api.cpp
@@ -1959,8 +1959,10 @@ void NumberFormatterApiTest::symbols() {
             nullptr,
             NumberFormatter::with().symbols(FRENCH_SYMBOLS),
             Locale::getJapan(),
-            u"87\u202F650",
-            u"8\u202F765",
+            /* MSFT Change: Begin */
+            u"87\u00a0650",
+            u"8\u00a0765",
+            /* MSFT Change: End */
             u"876,5",
             u"87,65",
             u"8,765",
@@ -2000,8 +2002,10 @@ void NumberFormatterApiTest::symbols() {
             u"numbering-system/mathsanb",
             NumberFormatter::with().adoptSymbols(new NumberingSystem(MATHSANB)),
             Locale::getFrench(),
-            u"𝟴𝟳\u202F𝟲𝟱𝟬",
-            u"𝟴\u202F𝟳𝟲𝟱",
+            /* MSFT Change: Begin */
+            u"𝟴𝟳\u00a0𝟲𝟱𝟬",
+            u"𝟴\u00a0𝟳𝟲𝟱",
+            /* MSFT Change: End */
             u"𝟴𝟳𝟲,𝟱",
             u"𝟴𝟳,𝟲𝟱",
             u"𝟴,𝟳𝟲𝟱",
@@ -2630,7 +2634,9 @@ void NumberFormatterApiTest::locale() {
     UErrorCode status = U_ZERO_ERROR;
     UnicodeString actual = NumberFormatter::withLocale(Locale::getFrench()).formatInt(1234, status)
             .toString(status);
-    assertEquals("Locale withLocale()", u"1\u202f234", actual);
+    /* MSFT Change: Begin */
+    assertEquals("Locale withLocale()", u"1\u00a0234", actual);
+    /* MSFT Change: End */
 }
 
 void NumberFormatterApiTest::skeletonUserGuideExamples() {
diff --git a/icu/icu/icu4c/source/test/intltest/numbertest_decimalquantity.cpp b/icu/icu/icu4c/source/test/intltest/numbertest_decimalquantity.cpp
index 8cb0ac0d..1d3def4f 100644
--- a/icu/icu/icu4c/source/test/intltest/numbertest_decimalquantity.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numbertest_decimalquantity.cpp
@@ -483,17 +483,18 @@ void DecimalQuantityTest::testCompactDecimalSuppressedExponent() {
         int32_t expectedSuppressedExponent;
     } cases[] = {
         // unlocalized formatter skeleton, input, string output, long output, double output, BigDecimal output, plain string, suppressed exponent
-        {u"",              123456789, u"123 456 789",  123456789L, 123456789.0, u"123456789", 0},
+        /* MSFT Change: Begin */
+        {u"",              123456789, u"123\u00A0456\u00A0789",  123456789L, 123456789.0, u"123456789", 0},
         {u"compact-long",  123456789, u"123 millions", 123000000L, 123000000.0, u"123000000", 6},
         {u"compact-short", 123456789, u"123 M",        123000000L, 123000000.0, u"123000000", 6},
         {u"scientific",    123456789, u"1,234568E8",   123456800L, 123456800.0, u"123456800", 8},
 
-        {u"",              1234567, u"1 234 567",   1234567L, 1234567.0, u"1234567", 0},
+        {u"",              1234567, u"1\u00A0234\u00A0567",   1234567L, 1234567.0, u"1234567", 0},
         {u"compact-long",  1234567, u"1,2 million", 1200000L, 1200000.0, u"1200000", 6},
         {u"compact-short", 1234567, u"1,2 M",       1200000L, 1200000.0, u"1200000", 6},
         {u"scientific",    1234567, u"1,234567E6",  1234567L, 1234567.0, u"1234567", 6},
 
-        {u"",              123456, u"123 456",   123456L, 123456.0, u"123456", 0},
+        {u"",              123456, u"123\u00A0456",   123456L, 123456.0, u"123456", 0},
         {u"compact-long",  123456, u"123 mille", 123000L, 123000.0, u"123000", 3},
         {u"compact-short", 123456, u"123 k",     123000L, 123000.0, u"123000", 3},
         {u"scientific",    123456, u"1,23456E5", 123456L, 123456.0, u"123456", 5},
@@ -523,10 +524,11 @@ void DecimalQuantityTest::testCompactDecimalSuppressedExponent() {
         {u"compact-short", 999.9, u"1 k",       1000L, 1000.0, u"1000",  3},
         {u"scientific",    999.9, u"9,999E2",   999L,  999.9,  u"999.9", 2},
 
-        {u"",              1000.0, u"1 000",     1000L, 1000.0, u"1000", 0},
+        {u"",              1000.0, u"1\u00A0000",     1000L, 1000.0, u"1000", 0},
         {u"compact-long",  1000.0, u"1 millier", 1000L, 1000.0, u"1000", 3},
         {u"compact-short", 1000.0, u"1 k",       1000L, 1000.0, u"1000", 3},
         {u"scientific",    1000.0, u"1E3",       1000L, 1000.0, u"1000", 3},
+        /* MSFT Change: End */
     };
     for (const auto& cas : cases) {
         // test the helper methods used to compute plural operand values
diff --git a/icu/icu/icu4c/source/test/intltest/numbertest_range.cpp b/icu/icu/icu4c/source/test/intltest/numbertest_range.cpp
index 75816ba9..fe22e348 100644
--- a/icu/icu/icu4c/source/test/intltest/numbertest_range.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numbertest_range.cpp
@@ -138,11 +138,13 @@ void NumberRangeFormatterTest::testBasic() {
         u"≈5\u00A0degrés Fahrenheit",
         u"0–3\u00A0degrés Fahrenheit",
         u"≈0\u00A0degré Fahrenheit",
-        u"3–3\u202F000\u00A0degrés Fahrenheit",
-        u"3\u202F000–5\u202F000\u00A0degrés Fahrenheit",
-        u"4\u202F999–5\u202F001\u00A0degrés Fahrenheit",
-        u"≈5\u202F000\u00A0degrés Fahrenheit",
-        u"5\u202F000–5\u202F000\u202F000\u00A0degrés Fahrenheit");
+        /* MSFT Change: Begin */
+        u"3–3\u00a0000\u00A0degrés Fahrenheit",
+        u"3\u00a0000–5\u00a0000\u00A0degrés Fahrenheit",
+        u"4\u00a0999–5\u00a0001\u00A0degrés Fahrenheit",
+        u"≈5\u00a0000\u00A0degrés Fahrenheit",
+        u"5\u00a0000–5\u00a0000\u00a0000\u00A0degrés Fahrenheit");
+        /* MSFT Change: End */
 
     assertFormatRange(
         u"Locale with custom range separator",
diff --git a/icu/icu/icu4c/source/test/intltest/numfmtspectest.cpp b/icu/icu/icu4c/source/test/intltest/numfmtspectest.cpp
index 99af1c27..3dc0e5b8 100644
--- a/icu/icu/icu4c/source/test/intltest/numfmtspectest.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numfmtspectest.cpp
@@ -89,14 +89,16 @@ void NumberFormatSpecificationTest::runIndexedTest(
 }
 
 void NumberFormatSpecificationTest::TestBasicPatterns() {
-    assertPatternFr("1\\u202F234,57", 1234.567, "#,##0.##", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("1 234,57", 1234.567, "#,##0.##", TRUE);
     assertPatternFr("1234,57", 1234.567, "0.##", TRUE);
     assertPatternFr("1235", 1234.567, "0", TRUE);
-    assertPatternFr("1\\u202F234,567", 1234.567, "#,##0.###", TRUE);
+    assertPatternFr("1 234,567", 1234.567, "#,##0.###", TRUE);
     assertPatternFr("1234,567", 1234.567, "###0.#####", TRUE);
     assertPatternFr("1234,5670", 1234.567, "###0.0000#", TRUE);
     assertPatternFr("01234,5670", 1234.567, "00000.0000", TRUE);
-    assertPatternFr("1\\u202F234,57 \\u20ac", 1234.567, "#,##0.00 \\u00a4", TRUE);
+    assertPatternFr("1 234,57 \\u20ac", 1234.567, "#,##0.00 \\u00a4", TRUE);
+    /* MSFT Change: End */
 }
 
 void NumberFormatSpecificationTest::TestNfSetters() {
@@ -107,8 +109,10 @@ void NumberFormatSpecificationTest::TestNfSetters() {
     }
     nf->setMaximumIntegerDigits(5);
     nf->setMinimumIntegerDigits(4);
-    assertEquals("", u"34\u202F567,89", format(1234567.89, *nf), TRUE);
-    assertEquals("", u"0\u202F034,56", format(34.56, *nf), TRUE);
+    /* MSFT Change: Begin */
+    assertEquals("", u"34 567,89", format(1234567.89, *nf), TRUE);
+    assertEquals("", u"0 034,56", format(34.56, *nf), TRUE);
+    /* MSFT Change: End */
 }
 
 void NumberFormatSpecificationTest::TestRounding() {
@@ -121,20 +125,23 @@ void NumberFormatSpecificationTest::TestRounding() {
     assertPatternFr("8", 10.0, "4", TRUE);
     assertPatternFr("99,90", 99.0, "2.70", TRUE);
     assertPatternFr("273,00", 272.0, "2.73", TRUE);
-    assertPatternFr("1\\u202F03,60", 104.0, "#,#3.70", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("1 03,60", 104.0, "#,#3.70", TRUE);
+    /* MSFT Change: End */
 }
 
 void NumberFormatSpecificationTest::TestSignificantDigits() {
-    assertPatternFr("1230", 1234.0, "@@@", TRUE);
-    assertPatternFr("1\\u202F234", 1234.0, "@,@@@", TRUE);
-    assertPatternFr("1\\u202F235\\u202F000", 1234567.0, "@,@@@", TRUE);
-    assertPatternFr("1\\u202F234\\u202F567", 1234567.0, "@@@@,@@@", TRUE);
-    assertPatternFr("12\\u202F34\\u202F567,00", 1234567.0, "@@@@,@@,@@@", TRUE);
-    assertPatternFr("12\\u202F34\\u202F567,0", 1234567.0, "@@@@,@@,@@#", TRUE);
-    assertPatternFr("12\\u202F34\\u202F567", 1234567.0, "@@@@,@@,@##", TRUE);
-    assertPatternFr("12\\u202F34\\u202F567", 1234567.001, "@@@@,@@,@##", TRUE);
-    assertPatternFr("12\\u202F34\\u202F567", 1234567.001, "@@@@,@@,###", TRUE);
-    assertPatternFr("1\\u202F200", 1234.0, "#,#@@", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("1 234", 1234.0, "@,@@@", TRUE);
+    assertPatternFr("1 235 000", 1234567.0, "@,@@@", TRUE);
+    assertPatternFr("1 234 567", 1234567.0, "@@@@,@@@", TRUE);
+    assertPatternFr("12 34 567,00", 1234567.0, "@@@@,@@,@@@", TRUE);
+    assertPatternFr("12 34 567,0", 1234567.0, "@@@@,@@,@@#", TRUE);
+    assertPatternFr("12 34 567", 1234567.0, "@@@@,@@,@##", TRUE);
+    assertPatternFr("12 34 567", 1234567.001, "@@@@,@@,@##", TRUE);
+    assertPatternFr("12 34 567", 1234567.001, "@@@@,@@,###", TRUE);
+    assertPatternFr("1 200", 1234.0, "#,#@@", TRUE);
+    /* MSFT Change: End */
 }
 
 void NumberFormatSpecificationTest::TestScientificNotation() {
@@ -159,8 +166,10 @@ void NumberFormatSpecificationTest::TestPercent() {
     assertPatternFr("p%p57,3", 0.573, "p%p0.0", TRUE);
     assertPatternFr("p%p0,6", 0.573, "p'%'p0.0", TRUE);
     assertPatternFr("%3,260", 0.0326, "%@@@@", TRUE);
-    assertPatternFr("%1\\u202F540", 15.43, "%#,@@@", TRUE);
-    assertPatternFr("%1\\u202F656,4", 16.55, "%#,##4.1", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("%1 540", 15.43, "%#,@@@", TRUE);
+    assertPatternFr("%1 656,4", 16.55, "%#,##4.1", TRUE);
+    /* MSFT Change: End */
     assertPatternFr("%16,3E3", 162.55, "%##0.00E0", TRUE);
 }
 
@@ -170,18 +179,22 @@ void NumberFormatSpecificationTest::TestPerMilli() {
     assertPatternFr("p\\u2030p573,0", 0.573, "p\\u2030p0.0", TRUE);
     assertPatternFr("p\\u2030p0,6", 0.573, "p'\\u2030'p0.0", TRUE);
     assertPatternFr("\\u203032,60", 0.0326, "\\u2030@@@@", TRUE);
-    assertPatternFr("\\u203015\\u202F400", 15.43, "\\u2030#,@@@", TRUE);
-    assertPatternFr("\\u203016\\u202F551,7", 16.55, "\\u2030#,##4.1", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("\\u203015 400", 15.43, "\\u2030#,@@@", TRUE);
+    assertPatternFr("\\u203016 551,7", 16.55, "\\u2030#,##4.1", TRUE);
+    /* MSFT Change: End */
     assertPatternFr("\\u2030163E3", 162.55, "\\u2030##0.00E0", TRUE);
 }
 
 void NumberFormatSpecificationTest::TestPadding() {
-    assertPatternFr("$***1\\u202F234", 1234, "$**####,##0", TRUE);
-    assertPatternFr("xxx$1\\u202F234", 1234, "*x$####,##0", TRUE);
-    assertPatternFr("1\\u202F234xxx$", 1234, "####,##0*x$", TRUE);
-    assertPatternFr("1\\u202F234$xxx", 1234, "####,##0$*x", TRUE);
-    assertPatternFr("ne1\\u202F234nx", -1234, "####,##0$*x;ne#n", TRUE);
-    assertPatternFr("n1\\u202F234*xx", -1234, "####,##0$*x;n#'*'", TRUE);
+    /* MSFT Change: Begin */
+    assertPatternFr("$***1 234", 1234, "$**####,##0", TRUE);
+    assertPatternFr("xxx$1 234", 1234, "*x$####,##0", TRUE);
+    assertPatternFr("1 234xxx$", 1234, "####,##0*x$", TRUE);
+    assertPatternFr("1 234$xxx", 1234, "####,##0$*x", TRUE);
+    assertPatternFr("ne1 234nx", -1234, "####,##0$*x;ne#n", TRUE);
+    assertPatternFr("n1 234*xx", -1234, "####,##0$*x;n#'*'", TRUE);
+    /* MSFT Change: End */
     assertPatternFr("yyyy%432,6", 4.33, "*y%4.2######",  TRUE);
     assertPatternFr("EUR *433,00", 433.0, "\\u00a4\\u00a4 **####0.00");
     assertPatternFr("EUR *433,00", 433.0, "\\u00a4\\u00a4 **#######0");
diff --git a/icu/icu/icu4c/source/test/intltest/numfmtst.cpp b/icu/icu/icu4c/source/test/intltest/numfmtst.cpp
index 5a26a7a5..b61bf526 100644
--- a/icu/icu/icu4c/source/test/intltest/numfmtst.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numfmtst.cpp
@@ -199,7 +199,9 @@ void NumberFormatTest::runIndexedTest( int32_t index, UBool exec, const char* &n
   TESTCASE_AUTO(Test11640_getAffixes);
   TESTCASE_AUTO(Test11649_toPatternWithMultiCurrency);
   TESTCASE_AUTO(Test13327_numberingSystemBufferOverflow);
-  TESTCASE_AUTO(Test13391_chakmaParsing);
+  /* MSFT Change: Begin */
+  // TESTCASE_AUTO(Test13391_chakmaParsing);
+  /* MSFT Change: End */
   TESTCASE_AUTO(Test11735_ExceptionIssue);
   TESTCASE_AUTO(Test11035_FormatCurrencyAmount);
   TESTCASE_AUTO(Test11318_DoubleConversion);
@@ -1019,19 +1021,21 @@ void NumberFormatTest::TestCurrencyObject() {
         return;
     }
 
-    expectCurrency(*fmt, null, 1234.56, CharsToUnicodeString("1\\u202F234,56 \\u20AC"));
+    /* MSFT Change: Begin */
+    expectCurrency(*fmt, null, 1234.56, CharsToUnicodeString("1 234,56 \\u20AC"));
 
     expectCurrency(*fmt, Locale::getJapan(),
-                   1234.56, CharsToUnicodeString("1\\u202F235 JPY")); // Yen
+                   1234.56, CharsToUnicodeString("1 235 JPY")); // Yen
 
     expectCurrency(*fmt, Locale("fr", "CH", ""),
-                   1234.56, CharsToUnicodeString("1\\u202F234,56 CHF")); // no more 0.05 rounding here, see cldrbug 5548
+                   1234.56, CharsToUnicodeString("1 234,56 CHF")); // no more 0.05 rounding here, see cldrbug 5548
 
     expectCurrency(*fmt, Locale::getUS(),
-                   1234.56, CharsToUnicodeString("1\\u202F234,56 $US"));
+                   1234.56, CharsToUnicodeString("1 234,56 $US"));
 
     expectCurrency(*fmt, Locale::getFrance(),
-                   1234.56, CharsToUnicodeString("1\\u202F234,56 \\u20AC")); // Euro
+                   1234.56, CharsToUnicodeString("1 234,56 \\u20AC")); // Euro
+    /* MSFT Change: End */
 
     delete fmt;
 }
diff --git a/icu/icu/icu4c/source/test/intltest/numrgts.cpp b/icu/icu/icu4c/source/test/intltest/numrgts.cpp
index 7bdb5f86..49a7cf18 100644
--- a/icu/icu/icu4c/source/test/intltest/numrgts.cpp
+++ b/icu/icu/icu4c/source/test/intltest/numrgts.cpp
@@ -548,10 +548,12 @@ void NumberFormatRegressionTest::Test4086575(void)
     logln("...applyLocalizedPattern # ###,00;(# ###,00) ");
     // nbsp = \u00a0
     //nf->applyLocalizedPattern("#\u00a0###,00;(#\u00a0###,00)");
+    /* MSFT Change: Begin */
     UChar patChars[] = {
-             0x23, 0x202f, 0x23, 0x23, 0x23, 0x2c, 0x30, 0x30, 0x3b, 
-        0x28, 0x23, 0x202f, 0x23, 0x23, 0x23, 0x2c, 0x30, 0x30, 0x29
+             0x23, 0x00a0, 0x23, 0x23, 0x23, 0x2c, 0x30, 0x30, 0x3b, 
+        0x28, 0x23, 0x00a0, 0x23, 0x23, 0x23, 0x2c, 0x30, 0x30, 0x29
     };
+    /* MSFT Change: End */
     UnicodeString pat(patChars, 19, 19);
     nf->applyLocalizedPattern(pat, status);
     failure(status, "nf->applyLocalizedPattern", Locale::getFrance());
@@ -560,18 +562,22 @@ void NumberFormatRegressionTest::Test4086575(void)
     UnicodeString buffer;
     buffer = nf->format((int32_t)1234, buffer, pos);
     //if (buffer != UnicodeString("1\u00a0234,00"))
+    /* MSFT Change: Begin */
     UChar c[] = {
-        0x31, 0x202f, 0x32, 0x33, 0x34, 0x2c, 0x30, 0x30
+        0x31, 0x00a0, 0x32, 0x33, 0x34, 0x2c, 0x30, 0x30
     };
+    /* MSFT Change: End */
     UnicodeString cc(c, 8, 8);
     if (buffer != cc)
         errln("nf : " + buffer); // Expect 1 234,00
     
     buffer.remove();
     buffer = nf->format((int32_t)-1234, buffer, pos);
+    /* MSFT Change: Begin */
     UChar c1[] = {
-        0x28, 0x31, 0x202f, 0x32, 0x33, 0x34, 0x2c, 0x30, 0x30, 0x29
+        0x28, 0x31, 0x00a0, 0x32, 0x33, 0x34, 0x2c, 0x30, 0x30, 0x29
     };
+    /* MSFT Change: End */
     UnicodeString cc1(c1, 10, 10);
     if (buffer != cc1)
         errln("nf : " + buffer); // Expect (1 234,00)
@@ -896,20 +902,22 @@ void NumberFormatRegressionTest::Test4070798 (void)
     NumberFormat *formatter;
     UnicodeString tempString;
     
+    /* MSFT Change: Begin */
     /* User error :
-    String expectedDefault = "-5\u202f789,987";
-    String expectedCurrency = "5\u202f789,98\u00a0F";
-    String expectedPercent = "-578\u202f998%";
+    String expectedDefault = "-5\u00a0789,987";
+    String expectedCurrency = "5\u00a0789,98\u00a0F";
+    String expectedPercent = "-578\u00a0998%";
     */
     UChar chars1 [] = {
-        0x2d, 0x35, 0x202f, 0x37, 0x38, 0x39, 0x2c, 0x39, 0x38, 0x38
+        0x2d, 0x35, 0x00a0, 0x37, 0x38, 0x39, 0x2c, 0x39, 0x38, 0x38
     };
     UChar chars2 [] = {
-        0x35, 0x202f, 0x37, 0x38, 0x39, 0x2c, 0x39, 0x39, 0x00a0, 0x46
+        0x35, 0x00a0, 0x37, 0x38, 0x39, 0x2c, 0x39, 0x39, 0x00a0, 0x46
     };
     UChar chars3 [] = {
-        0x2d, 0x35, 0x37, 0x38, 0x202f, 0x39, 0x39, 0x39, 0x00a0, 0x25
+        0x2d, 0x35, 0x37, 0x38, 0x00a0, 0x39, 0x39, 0x39, 0x00a0, 0x25
     };
+    /* MSFT Change: End */
     UnicodeString expectedDefault(chars1, 10, 10);
     UnicodeString expectedCurrency(chars2, 10, 10);
     UnicodeString expectedPercent(chars3, 10, 10);
diff --git a/icu/icu/icu4c/source/test/intltest/tsmthred.cpp b/icu/icu/icu4c/source/test/intltest/tsmthred.cpp
index 98e04869..b43ca33e 100644
--- a/icu/icu/icu4c/source/test/intltest/tsmthred.cpp
+++ b/icu/icu/icu4c/source/test/intltest/tsmthred.cpp
@@ -518,13 +518,15 @@ class FormatThreadTest : public SimpleThread
         // Keep this data here to avoid static initialization.
         FormatThreadTestData kPercentFormatTestData[] =
         {
+            /* MSFT Change: Begin */
             FormatThreadTestData((double)5.0, CharsToUnicodeString("500\\u00a0%")),
                 FormatThreadTestData( 1.0, CharsToUnicodeString("100\\u00a0%")),
                 FormatThreadTestData( 0.26, CharsToUnicodeString("26\\u00a0%")),
                 FormatThreadTestData(
-                   16384.99, CharsToUnicodeString("1\\u202F638\\u202F499\\u00a0%")), // U+202F = NNBSP
+                   16384.99, CharsToUnicodeString("1\\u00a0638\\u00a0499\\u00a0%")), // U+202F = NNBSP, U+00A0 = NBSP
                 FormatThreadTestData(
-                    81890.23, CharsToUnicodeString("8\\u202F189\\u202F023\\u00a0%")),
+                    81890.23, CharsToUnicodeString("8\\u00a0189\\u00a0023\\u00a0%")),
+            /* MSFT Change: End */
         };
         int32_t kPercentFormatTestDataLength = UPRV_LENGTHOF(kPercentFormatTestData);
         int32_t iteration;
diff --git a/icu/icu/icu4c/source/test/testdata/numberformattestspecification.txt b/icu/icu/icu4c/source/test/testdata/numberformattestspecification.txt
index aa4fa3c3..9a98ec87 100644
--- a/icu/icu/icu4c/source/test/testdata/numberformattestspecification.txt
+++ b/icu/icu/icu4c/source/test/testdata/numberformattestspecification.txt
@@ -33,14 +33,14 @@ set format 1234.567
 begin
 pattern	output	breaks
 // K does not use \u202f narrow space
-#,##0.##	1\u202f234,57	K
+#,##0.##	1\u00a0234,57	K
 0.##	1234,57
 0	1235
-#,##0.###	1\u202f234,567	K
+#,##0.###	1\u00a0234,567	K
 ###0.######	1234,567
 ###0.0000#	1234,5670
 00000.0000	01234,5670
-#,##0.00 \u00a4	1\u202f234,57 \u20ac	K
+#,##0.00 \u00a4	1\u00a0234,57 \u20ac	K
 'tick''bitten '0.00	tick'bitten 1234,57
 'tick' 'bitten '0.00	tick bitten 1234,57
 
@@ -151,7 +151,7 @@ pattern	format	output	breaks
 4	10.0	8	K
 2.70	99.0	99,90	K
 2.73	272.0	273,00	K
-#,#3.70	104.0	1\u202f03,60	K
+#,#3.70	104.0	1\u00a003,60	K
 
 test significant digits
 set locale en
@@ -235,9 +235,9 @@ pattern	format	output	breaks
 p%p0.0	0.573	p%p57,3
 p'%'p0.0	0.573	p%p0,6
 %@@@@	0.0326	%3,260	K
-%#,@@@	15.43	%1\u202f540	K
+%#,@@@	15.43	%1\u00a0540	K
 // JDK does not support rounding increments
-%#,##4.1	16.55	%1\u202f656,4	K
+%#,##4.1	16.55	%1\u00a0656,4	K
 // JDK gives %16,255E3
 %##0.00E0	162.55	%16,3E3	K
 
@@ -250,8 +250,8 @@ pattern	format	output	breaks
 p\u2030p0.0	0.573	p\u2030p573,0
 p'\u2030'p0.0	0.573	p\u2030p0,6
 \u2030@@@@	0.0326	\u203032,60	K
-\u2030#,@@@	15.43	\u203015\u202f400	K
-\u2030#,##4.1	16.55	\u203016\u202f551,7	K
+\u2030#,@@@	15.43	\u203015\u00a0400	K
+\u2030#,##4.1	16.55	\u203016\u00a0551,7	K
 // JDK gives \u2030162,55E3
 \u2030##0.00E0	162.55	\u2030163E3	K
 
@@ -260,13 +260,13 @@ set locale fr_FR
 begin
 pattern	format	output	breaks
 // JDK does not seem to support padding
-$**####,##0	1234	$***1\u202f234	K
-*x$####,##0	1234	xxx$1\u202f234	K
-####,##0*x$	1234	1\u202f234xxx$	K
-####,##0$*x	1234	1\u202f234$xxx	K
+$**####,##0	1234	$***1\u00a0234	K
+*x$####,##0	1234	xxx$1\u00a0234	K
+####,##0*x$	1234	1\u00a0234xxx$	K
+####,##0$*x	1234	1\u00a0234$xxx	K
 // JDK doesn't seem to handle suffixes correctly dropping the 'nx' entirely
-####,##0$*x;ne#n	-1234	ne1\u202f234nx	K
-####,##0$*x;n#'*'	-1234	n1\u202f234*xx	K
+####,##0$*x;ne#n	-1234	ne1\u00a0234nx	K
+####,##0$*x;n#'*'	-1234	n1\u00a0234*xx	K
 *y%4.2######	4.33	yyyy%432,6	K
 // In J ICU adds padding as if 'EUR' is only 2 chars (2 * 0xa4)
 \u00a4\u00a4 **####0.00	433.0	EUR *433,00	K
@@ -288,10 +288,10 @@ set format 1234.567
 begin
 pattern	currency	output	breaks
 // JDK gives shows EUR instead of the euro symbol in this case
-#,##0.00 \u00a4	EUR	1\u202f234,57 \u20ac	K
+#,##0.00 \u00a4	EUR	1\u00a0234,57 \u20ac	K
 // JDK gives 1\u00A0234,57. JDK doesn't seem to correct rounding
 // based on currency.
-#,##0.00 \u00a4	JPY	1\u202f235 JPY	K
+#,##0.00 \u00a4	JPY	1\u00a0235 JPY	K
 
 test prefixes and suffixes
 set locale en
-- 
2.20.1.vfs.1.1.104.g2ab7360

